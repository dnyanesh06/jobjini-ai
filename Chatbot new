{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOAvgFij7l2AebLClvZzkuZ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/dnyanesh06/jobjini-ai/blob/main/Chatbot%20new\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "G4-JV0uNUrSi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "source": [
        "import random\n",
        "import requests\n",
        "\n",
        "def get_user_info():\n",
        "    \"\"\"Collects user information (name, qualifications, skills).\"\"\"\n",
        "    print(\"Hello! I'm your AI-powered Job Recommendation Bot.\")\n",
        "    first_name = input(\"To start, please tell me your first name: \")\n",
        "    qualifications = input(\"What are your qualifications? (e.g., Bachelor's Degree in Computer Science): \")\n",
        "    skills = input(\"Enter your skills, separated by commas (e.g., Python, Java, 3D animation): \").split(',')\n",
        "    skills = [skill.strip().lower() for skill in skills]\n",
        "    print(f\"Thanks, {first_name}! I'm analyzing your qualifications and skills...\")\n",
        "    return first_name, qualifications, skills\n",
        "\n",
        "def recommend_jobs(skills):\n",
        "    \"\"\"Recommends jobs based on skills from a local database.\"\"\"\n",
        "    companies_and_jobs = {\n",
        "        \"Google\": [\"Software Engineer\", \"AI Researcher\", \"Data Scientist\", \"Cloud Engineer\", \"UX Designer\", \"Product Manager\", \"Data Analyst\", \"Cybersecurity Analyst\"],\n",
        "        \"Microsoft\": [\"Software Engineer\", \"Cloud Engineer\", \"AI Researcher\", \"Data Scientist\", \"Product Manager\", \"Technical Writer\", \"Solutions Architect\", \"DevOps Engineer\"],\n",
        "        \"Amazon\": [\"Software Engineer\", \"Data Scientist\", \"Cloud Engineer\", \"Product Manager\", \"Business Analyst\", \"Marketing Specialist\", \"Operations Manager\", \"Warehouse Associate\"],\n",
        "        \"Meta\": [\"Software Engineer\", \"AI Researcher\", \"Data Scientist\", \"Product Designer\", \"Marketing Specialist\", \"Content Creator\", \"Community Manager\", \"Data Engineer\"],\n",
        "        \"Netflix\": [\"Software Engineer\", \"Data Scientist\", \"Machine Learning Engineer\", \"UX Designer\", \"Content Creator\", \"Streaming Engineer\", \"Security Engineer\", \"Product Analyst\"],\n",
        "        \"Pixar\": [\"3D Animator\", \"VFX Artist\", \"Character Rigger\", \"Story Artist\", \"Animation Director\", \"Lighting Artist\", \"Compositor\", \"Render Technical Director\"],\n",
        "        \"DreamWorks Animation\": [\"3D Animator\", \"VFX Artist\", \"Character Modeler\", \"Story Artist\", \"Animation Director\", \"Layout Artist\", \"Storyboard Artist\", \"FX Artist\"],\n",
        "        \"Industrial Light & Magic (ILM)\": [\"VFX Artist\", \"3D Modeler\", \"Compositor\", \"Lighting Artist\", \"FX Artist\", \"Concept Artist\", \"Matte Painter\", \"Technical Director\"],\n",
        "        \"Weta Digital\": [\"VFX Artist\", \"3D Animator\", \"Compositor\", \"Concept Artist\", \"Creature Technical Director\", \"Rigging Artist\", \"Animation Supervisor\", \"FX Supervisor\"],\n",
        "        \"DNEG\": [\"VFX Artist\", \"3D Modeler\", \"Compositor\", \"Roto Artist\", \"Paint Artist\", \"Matchmove Artist\", \"Layout Artist\", \"Environment Artist\"],\n",
        "        \"MPC\": [\"VFX Artist\", \"3D Animator\", \"Compositor\", \"Matchmove Artist\", \"Layout Artist\", \"FX Artist\", \"Lighting Artist\", \"Creature Technical Director\"],\n",
        "        \"Adobe\": [\"Software Engineer\", \"UX Designer\", \"Product Manager\", \"Marketing Specialist\", \"Graphic Designer\", \"Web Developer\", \"Video Editor\", \"Motion Graphics Designer\"],\n",
        "        \"Autodesk\": [\"Software Engineer\", \"3D Modeler\", \"Product Designer\", \"Technical Support Specialist\", \"Simulation Engineer\", \"Product Manager\", \"Software Architect\", \"Technical Writer\"],\n",
        "        \"Unity Technologies\": [\"Software Engineer\", \"Game Developer\", \"3D Artist\", \"Technical Artist\", \"VR/AR Developer\", \"Product Manager\", \"QA Tester\", \"Technical Support Engineer\"],\n",
        "        \"Epic Games\": [\"Software Engineer\", \"Game Developer\", \"3D Artist\", \"Technical Artist\", \"UX Designer\", \"Product Manager\", \"Marketing Specialist\", \"Community Manager\"],\n",
        "        \"Blizzard Entertainment\": [\"Game Developer\", \"Software Engineer\", \"3D Artist\", \"Level Designer\", \"Game Designer\", \"Producer\", \"QA Tester\", \"Community Manager\"],\n",
        "        \"Electronic Arts (EA)\": [\"Game Developer\", \"Software Engineer\", \"3D Artist\", \"Animator\", \"Game Designer\", \"Producer\", \"Marketing Specialist\", \"Data Analyst\"],\n",
        "        \"Ubisoft\": [\"Game Developer\", \"Software Engineer\", \"3D Artist\", \"Level Designer\", \"Game Designer\", \"Producer\", \"QA Tester\", \"Community Manager\"],\n",
        "        \"Activision\": [\"Game Developer\", \"Software Engineer\", \"3D Artist\", \"Animator\", \"Game Designer\", \"Producer\", \"Marketing Specialist\", \"Data Analyst\"],\n",
        "        \"Nintendo\": [\"Game Developer\", \"Software Engineer\", \"Hardware Engineer\", \"Game Designer\", \"Sound Designer\", \"Artist\", \"Producer\", \"QA Tester\"],\n",
        "\n",
        "    }\n",
        "\n",
        "    recommended_jobs = []\n",
        "    for company, jobs in companies_and_jobs.items():\n",
        "        for job in jobs:\n",
        "            if any(skill in job.lower() for skill in skills) or any(skill in company.lower() for skill in skills):\n",
        "                recommended_jobs.append((company, job))\n",
        "\n",
        "    # Prioritize 3D animation/VFX if the user has the skill\n",
        "    if \"3d animation\" in skills or \"vfx\" in skills:\n",
        "        vfx_companies = [\"Pixar\", \"DreamWorks Animation\", \"Industrial Light & Magic (ILM)\", \"Weta Digital\", \"DNEG\", \"MPC\"]  # Add more VFX companies\n",
        "        for company in vfx_companies:\n",
        "            if company in companies_and_jobs:\n",
        "                for job in companies_and_jobs[company]:\n",
        "                    if (company, job) not in recommended_jobs:\n",
        "                        recommended_jobs.append((company, job))\n",
        "\n",
        "    return recommended_jobs\n",
        "\n",
        "def search_jobs_online(skills):\n",
        "    \"\"\"Searches for jobs online using a hypothetical API (replace with a real API).\"\"\"\n",
        "    api_url = \"https://github.com/dnyanesh06/jobjini-ai\"  # Replace with real job search API endpoint\n",
        "    params = {\"q\": \",\".join(skills)}  # Format skills for the API\n",
        "    headers = {\"Authorization\": f\"token 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\"}  # Include your GitHub token (replace with your actual API key)\n",
        "\n",
        "    try:\n",
        "        response = requests.get(api_url, headers=headers, params=params)\n",
        "        response.raise_for_status()  # Raise HTTPError for bad responses (4xx or 5xx)\n",
        "        job_data = response.json()  # Assuming the API returns JSON\n",
        "\n",
        "        # Extract job info (adapt this to the real API's response structure)\n",
        "        extracted_jobs = []\n",
        "        for item in job_data[\"items\"]:\n",
        "            extracted_jobs.append(f\"Possible Job: {item['name']} at {item['full_name']} \")  # Replace with actual job details\n",
        "\n",
        "        return extracted_jobs\n",
        "\n",
        "    except requests.exceptions.RequestException as e:\n",
        "        print(f\"Error searching online: {e}\")\n",
        "        return []\n",
        "\n",
        "def main():\n",
        "    first_name, qualifications, skills = get_user_info()\n",
        "    recommendations = recommend_jobs(skills)\n",
        "\n",
        "    print(f\"\\nOkay, {first_name}, here are some job recommendations for you:\")\n",
        "    if recommendations:\n",
        "        for company, job in recommendations:\n",
        "            print(f\"- **{company}:** {job}\")\n",
        "    else:\n",
        "        print(\"I'm searching online for more options...\")\n",
        "        online_recommendations = search_jobs_online(skills)\n",
        "        if online_recommendations:\n",
        "            print(\"\\nHere are some jobs I found online:\")\n",
        "            for job_info in online_recommendations:\n",
        "                print(f\"- {job_info}\")\n",
        "        else:\n",
        "            print(\"I'm sorry, I couldn't find any suitable jobs online either.\")\n",
        "            print(\"Here are some suggestions to improve your chances:\")\n",
        "            print(\"  - Consider adding more skills to your profile.\")\n",
        "            print(\"  - Explore related fields or industries.\")\n",
        "            print(\"  - Keep learning and expanding your skillset!\")\n",
        "\n",
        "    print(\"\\nI hope this helps! Feel free to ask if you have any other questions.\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pwY-TcRrYhqb",
        "outputId": "421b4633-5d80-4b56-bb54-243e5ca3f6ce"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello! I'm your AI-powered Job Recommendation Bot.\n"
          ]
        }
      ]
    }
  ]
}